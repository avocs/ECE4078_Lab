# estimate the pose of target objects detected
import numpy as np
import json
import os
import ast
import PIL
import cv2
from machinevisiontoolbox import Image
from network.scripts.detector import Detector

# list of target fruits and vegs types
# Make sure the names are the same as the ones used in your YOLO model
TARGET_TYPES = ['1', '2', '3', '4', '5']

def estimate_pose(camera_matrix, obj_info, robot_pose):
    """
    function:
        estimate the pose of a target based on size and location of its bounding box and the corresponding robot pose
    input:
        camera_matrix: list, the intrinsic matrix computed from camera calibration (read from 'param/intrinsic.txt')
            |f_x, s,   c_x|
            |0,   f_y, c_y|
            |0,   0,   1  |
            (f_x, f_y): focal length in pixels
            (c_x, c_y): optical centre in pixels
            s: skew coefficient (should be 0 for PenguinPi)
        obj_info: list, an individual bounding box in an image (generated by get_bounding_box, [label,[x,y,width,height]])
        robot_pose: list, pose of robot corresponding to the image (read from 'lab_output/images.txt', [x,y,theta])
    output:
        target_pose: dict, prediction of target pose
    """
    # read in camera matrix (from camera calibration results)
    focal_length = camera_matrix[0][0]

    # there are 8 possible types of fruits and vegs
    ######### Replace with your codes #########
    # TODO: measure actual sizes of targets [width, depth, height] and update the dictionary of true target dimensions
    target_dimensions_dict = {'1': [0.077,0.08,0.085], '2': [0.081, 0.082, 0.077], 
                              '3': [0.075, 0.075, 0.072], '4': [0.113, 0.067, 0.058], 
                              '5': [0.075, 0.075, 0.088]}
    #########

    # estimate target pose using bounding box and robot pose
    target_class = obj_info[0]     # get predicted target label of the box
    target_box = obj_info[1]       # get bounding box measures: [x,y,width,height]
    true_height = target_dimensions_dict[target_class][2]   # look up true height of by class label

    # compute pose of the target based on bounding box info, true object height, and robot's pose
    pixel_height = target_box[3]
    pixel_center = target_box[0]
    distance = true_height/pixel_height * focal_length  # estimated distance between the robot and the centre of the image plane based on height
    # training image size 320x240p
    image_width = 640 # change this if your training image is in a different size (check details of pred_0.png taken by your robot)
    x_shift = image_width/2 - pixel_center              # x distance between bounding box centre and centreline in camera view
    theta = np.arctan(x_shift/focal_length)     # angle of object relative to the robot
    ang = theta + robot_pose[2]     # angle of object in the world frame
    
   # relative object location
    distance_obj = distance/np.cos(theta) # relative distance between robot and object
    x_relative = distance_obj * np.cos(theta) # relative x pose
    y_relative = distance_obj * np.sin(theta) # relative y pose
    relative_pose = {'x': x_relative, 'y': y_relative}
    #print(f'relative_pose: {relative_pose}')

    # location of object in the world frame using rotation matrix
    delta_x_world = x_relative * np.cos(ang) - y_relative * np.sin(ang)
    delta_y_world = x_relative * np.sin(ang) + y_relative * np.cos(ang)
    # add robot pose with delta target pose
    target_pose = {'y': (robot_pose[1]+delta_y_world)[0],
                   'x': (robot_pose[0]+delta_x_world)[0]}
    #print(f'delta_x_world: {delta_x_world}, delta_y_world: {delta_y_world}')
    #print(f'target_pose: {target_pose}')

    return target_pose


def merge_estimations(target_map):
    target_est = {}
    num_per_target = 1  # max number of units per target type. We are only using 1 unit per fruit type

    if target_map:
        for fruit_number in range(1, len(TARGET_TYPES) + 1):
            fruit_label = str(fruit_number)
            fruit_estimations = [target_map[key] for key in target_map if key.startswith(fruit_label)]

            # If there are estimations for this fruit type, calculate the mean
            if fruit_estimations:
                x_sum = sum(estimation['x'] for estimation in fruit_estimations)
                y_sum = sum(estimation['y'] for estimation in fruit_estimations)
                x_mean = round(x_sum / len(fruit_estimations), 1)
                y_mean = round(y_sum / len(fruit_estimations), 1)

                target_est[f'{TARGET_TYPES[fruit_number - 1]}_{0}'] = {'x': x_mean, 'y': y_mean}

    return target_est

def live_fruit_pose():
    fileK = "{}intrinsic.txt".format('./calibration/param/')
    camera_matrix = np.loadtxt(fileK, delimiter=',')
    script_dir = os.path.dirname(os.path.abspath(__file__))
    model_path = f'{script_dir}/network/scripts/model/model.best.pt'
    yolo = Detector(model_path)
    
    # a dictionary of all the saved detector outputs
    image_poses = {}
    with open(f'{script_dir}/lab_output/images.txt') as fp:
        for line in fp.readlines():
            pose_dict = ast.literal_eval(line)
            image_poses[pose_dict['imgfname']] = pose_dict['pose']
            
    # estimate pose of targets in each detector output
    target_pose_dict = {}
    detected_type_list = []
    for image_path in image_poses.keys():
        input_image = cv2.imread(image_path)
        bounding_boxes, bbox_img = yolo.detect_single_image(input_image)
        robot_pose = image_poses[image_path]

        for detection in bounding_boxes:
            # count the occurrence of each target type
            occurrence = detected_type_list.count(detection[0])
            target_pose_dict[f'{detection[0]}_{occurrence}'] = estimate_pose(camera_matrix, detection, robot_pose)
            

            detected_type_list.append(detection[0])

    # merge the estimations of the targets so that there are at most 3 estimations of each target type
    target_est = {}
    target_est = merge_estimations(target_pose_dict)

    number_to_fruit = {
        '1': 'redapple',
        '2': 'greenapple',
        '3': 'orange',
        '4': 'mango',
        '5': 'capsicum'
    }

    # Rename the keys in target_est using the mapping
    renamed_target_est = {}
    for key, value in target_est.items():
        target_type, index = key.split('_')
        fruit_name = number_to_fruit[target_type]
        new_key = f'{fruit_name}_{index}'
        renamed_target_est[new_key] = value

    return renamed_target_est




# main loop
if __name__ == "__main__":
    script_dir = os.path.dirname(os.path.abspath(__file__))     # get current script directory (TargetPoseEst.py)

    # read in camera matrix
    fileK = f'{script_dir}/calibration/param/intrinsic.txt'
    camera_matrix = np.loadtxt(fileK, delimiter=',')

    # init YOLO model
    model_path = f'{script_dir}/network/scripts/model/model.best.pt'
    yolo = Detector(model_path)

    # create a dictionary of all the saved images with their corresponding robot pose
    image_poses = {}
    with open(f'{script_dir}/lab_output/images.txt') as fp:
        for line in fp.readlines():
            pose_dict = ast.literal_eval(line)
            image_poses[pose_dict['imgfname']] = pose_dict['pose']

    # estimate pose of targets in each image
    target_pose_dict = {}
    detected_type_list = []
    for image_path in image_poses.keys():
        input_image = cv2.imread(image_path)
        bounding_boxes, bbox_img = yolo.detect_single_image(input_image)
        robot_pose = image_poses[image_path]

        for detection in bounding_boxes:
            # count the occurrence of each target type
            occurrence = detected_type_list.count(detection[0])
            target_pose_dict[f'{detection[0]}_{occurrence}'] = estimate_pose(camera_matrix, detection, robot_pose)
            

            detected_type_list.append(detection[0])

    # merge the estimations of the targets so that there are at most 3 estimations of each target type
    target_est = {}
    target_est = merge_estimations(target_pose_dict)

    # Create a mapping from numbers to fruit names
    number_to_fruit = {
        '1': 'redapple',
        '2': 'greenapple',
        '3': 'orange',
        '4': 'mango',
        '5': 'capsicum'
    }

    # Rename the keys in target_est using the mapping
    renamed_target_est = {}
    for key, value in target_est.items():
        target_type, index = key.split('_')
        fruit_name = number_to_fruit[target_type]
        new_key = f'{fruit_name}_{index}'
        renamed_target_est[new_key] = value

    # save target pose estimations
    print(renamed_target_est)
    with open(f'{script_dir}/lab_output/targets.txt', 'w') as fo:
        json.dump(renamed_target_est, fo, indent=4)

    print('Estimations saved!')